let x = `../.. => .##/##./.#.
#./.. => .#./#.#/##.
##/.. => #.#/#.#/###
.#/#. => #../.#./.#.
##/#. => ##./#.#/..#
##/## => #.#/#.#/...
.../.../... => ..##/##../##../#.#.
#../.../... => ##.#/..#./#.#./.#..
.#./.../... => ..#./##.#/#.##/###.
##./.../... => ###./##.#/.###/#.#.
#.#/.../... => ##../#..#/.###/#.#.
###/.../... => ...#/#..#/...#/...#
.#./#../... => ...#/.##./#.##/..#.
##./#../... => .##./.#../.##./.#..
..#/#../... => ####/.#../#.#./.###
#.#/#../... => ###./.#../##../....
.##/#../... => ##../#.#./#.#./##..
###/#../... => #.##/#..#/.#../##..
.../.#./... => .#.#/.###/.##./##..
#../.#./... => .###/.##./..##/..##
.#./.#./... => .##./.#.#/#.##/.###
##./.#./... => ..#./..../..#./###.
#.#/.#./... => ..../..#./..##/##..
###/.#./... => .#.#/#..#/.###/#..#
.#./##./... => ..../..#./.#../####
##./##./... => ..##/#.##/..#./#.##
..#/##./... => ..../#.##/.##./####
#.#/##./... => ..##/#.#./.#../.##.
.##/##./... => #.../...#/###./....
###/##./... => .#../#.#./#.##/....
.../#.#/... => #.#./####/#.../..#.
#../#.#/... => ...#/.#.#/###./.#.#
.#./#.#/... => #..#/#.../###./#.##
##./#.#/... => .##./#.../...#/#.##
#.#/#.#/... => #..#/##../##../.#..
###/#.#/... => #.#./...#/.#.#/.##.
.../###/... => .#.#/.##./..#./.#..
#../###/... => .###/..##/#.##/.#..
.#./###/... => #.../#.../.#../#...
##./###/... => .###/...#/.#.#/.#..
#.#/###/... => .#../..##/#..#/#...
###/###/... => .###/##../##.#/#.#.
..#/.../#.. => ##.#/..../...#/..##
#.#/.../#.. => .#.#/###./...#/.#.#
.##/.../#.. => ##.#/.#../####/#.##
###/.../#.. => #.../#..#/###./....
.##/#../#.. => #..#/..#./####/...#
###/#../#.. => ####/###./##.#/....
..#/.#./#.. => .##./.##./##../#..#
#.#/.#./#.. => #..#/#..#/#.../.#..
.##/.#./#.. => ##../##.#/#.##/..##
###/.#./#.. => #.##/..##/.##./#.#.
.##/##./#.. => #.##/..../##../....
###/##./#.. => ###./.#.#/.###/.#..
#../..#/#.. => .###/#.##/..#./.##.
.#./..#/#.. => #..#/..##/.#.#/##..
##./..#/#.. => ###./#.../..##/##..
#.#/..#/#.. => #.../.##./.###/###.
.##/..#/#.. => ...#/##.#/..#./...#
###/..#/#.. => ###./..#./.#../...#
#../#.#/#.. => #..#/...#/..#./.#.#
.#./#.#/#.. => #..#/##.#/####/.##.
##./#.#/#.. => .###/##../..../.#..
..#/#.#/#.. => ..#./##.#/####/###.
#.#/#.#/#.. => #.#./#.##/##.#/.###
.##/#.#/#.. => ..#./####/##../.###
###/#.#/#.. => .#.#/###./.#.#/#...
#../.##/#.. => .###/..##/.#.#/..#.
.#./.##/#.. => #.##/.#../.###/#.#.
##./.##/#.. => .###/#.../#.../..#.
#.#/.##/#.. => ##../...#/..#./...#
.##/.##/#.. => ..##/.#.#/...#/####
###/.##/#.. => ##../.###/##../###.
#../###/#.. => ###./#..#/#.#./....
.#./###/#.. => ..../#.#./.###/.###
##./###/#.. => .###/##../#..#/####
..#/###/#.. => ..../#.#./#..#/##..
#.#/###/#.. => .#.#/..##/##.#/#..#
.##/###/#.. => .#../...#/##../.#..
###/###/#.. => #.../.###/###./##.#
.#./#.#/.#. => .#.#/#.##/###./#...
##./#.#/.#. => .#../.#../.#../.#..
#.#/#.#/.#. => ##.#/..../###./.#..
###/#.#/.#. => #.#./##.#/.#.#/##..
.#./###/.#. => ##.#/..#./..#./#.#.
##./###/.#. => ####/.###/.#.#/.##.
#.#/###/.#. => .#../.###/##../#.#.
###/###/.#. => #.../.##./..##/####
#.#/..#/##. => ..../..#./##../...#
###/..#/##. => .###/..#./#.##/###.
.##/#.#/##. => .###/..../#.#./...#
###/#.#/##. => ###./...#/.###/####
#.#/.##/##. => #.##/#.../..../...#
###/.##/##. => #.../#.../#..#/...#
.##/###/##. => .#../###./.###/..#.
###/###/##. => ##.#/.#../###./.#..
#.#/.../#.# => #.#./#.#./..../...#
###/.../#.# => ####/###./..../##.#
###/#../#.# => .###/##.#/#.##/..#.
#.#/.#./#.# => ###./.###/#.##/....
###/.#./#.# => .##./###./#.#./##..
###/##./#.# => #.../.#.#/#.##/#..#
#.#/#.#/#.# => ..#./#.#./##../..##
###/#.#/#.# => ..#./.#../...#/.##.
#.#/###/#.# => ..#./###./##.#/####
###/###/#.# => #.../#.#./#..#/.#.#
###/#.#/### => ..##/.##./.#.#/#...
###/###/### => .##./..##/####/###.`;

// x = `../.# => ##./#../...
// .#./..#/### => #..#/..../..../#..#`;

x = x.split("\n");

let obj = {};

for(let i = 0; i < x.length; i++){
    let str = x[i].split(" => ");
    obj[str[0]] = str[1];
}

let square = [".#.","..#","###"];

for (let i = 0; i < 18; i++){
    square = convertSquare(square);
}

let pixels = 0;
for(let i = 0; i < square.length; i++){
    for(let j = 0; j < square[i].length; j++){
        if(square[i][j] == "#") pixels++;
    }
}
console.log(pixels);

function convertSquare(square){
    let squares = [];
    if(square[0].length % 2 == 0){
       let size = square[0].length / 2;
       for(let y = 0; y < size; y++){
           squares[y] = [];
           for(let x = 0; x < size; x++){
               squares[y][x] = matchSquare([
                   [square[y*2 + 0][x*2 + 0], square[y*2 + 0][x*2 + 1]],
                   [square[y*2 + 1][x*2 + 0], square[y*2 + 1][x*2 + 1]]
               ]);
           }
       }
   } else if(square[0].length % 3 == 0){
        let size = square[0].length / 3;
        for(let y = 0; y < size; y++){
            squares[y] = [];
            for(let x = 0; x < size; x++){
                squares[y][x] = matchSquare([
                    [square[y*3 + 0][x*3 + 0], square[y*3 + 0][x*3 + 1], square[y*3 + 0][x*3 + 2]],
                    [square[y*3 + 1][x*3 + 0], square[y*3 + 1][x*3 + 1], square[y*3 + 1][x*3 + 2]],
                    [square[y*3 + 2][x*3 + 0], square[y*3 + 2][x*3 + 1], square[y*3 + 2][x*3 + 2]]
                ]);
            }
        }
    }

    let convertedSquare = [];

    for(let y = 0; y < squares.length; y++){
        for(let x = 0; x < squares[y].length; x++){
            let result = squares[y][x];
            for(let line = 0; line < result.length; line ++){
                if(convertedSquare[y*result.length + line] == undefined) convertedSquare[y*result.length + line] = "";
                convertedSquare[y*result.length + line] += result[line];
            }
        }
    }

    return convertedSquare;
}

function matchSquare(square) {
    for(let i = 0; i < 2; i++){
        if(i == 1) square = square[0].map((col, i) => square.map(row => row[i]));

        let square1 = square.map((row) => {
            return row.join("");
        }).join("/");
        if(obj[square1] !== undefined){
            return obj[square1].split("/");
        }
        let square2 = square.map((row) => {
            return row.reverse().join("");
        }).join("/");
        if(obj[square2] !== undefined){
            return obj[square2].split("/");
        }
        let square3 = square.map((row) => {
            return row.join("");
        }).reverse().join("/");
        if(obj[square3] !== undefined){
            return obj[square3].split("/");
        }
        let square4 = square.map((row) => {
            return row.reverse().join("");
        }).reverse().join("/");
        if(obj[square4] !== undefined){
            return obj[square4].split("/");
        }
    }

}
